1. Configuración de Git

    Git es un sistema de control de versiones distribuido que permite gestionar el historial de cambios de un proyecto de forma eficiente, tanto en repositorios locales como remotos.

    Importancia de Git:

        Control de versiones: Permite mantener un seguimiento de los cambios en el código.

        Trabajo distribuido: Los desarrolladores pueden trabajar de manera independiente en sus propias copias del repositorio.

        Facilita la colaboración: Permite que varios desarrolladores trabajen sobre el mismo proyecto sin interferir en el trabajo de los demás.

    Instalación y configuración:

        Verificar si Git está instalado con:

git --version

Configurar tu identidad para que Git te identifique como autor de los cambios:

        git config --global user.name "Tu Nombre"
        git config --global user.email "tu_email@example.com"

2. Creación de un Repositorio Git

    Repositorio Git: Es el espacio donde se almacena todo el historial de cambios de tu proyecto.

        Repositorio local: Es la copia de trabajo que tienes en tu computadora.

        Repositorio remoto: Es una copia del repositorio guardada en un servidor (como GitHub o GitLab) para compartir y colaborar.

    Directorios de un repositorio:

        .git: Carpeta oculta que Git utiliza para almacenar toda la información de control de versiones.

    Comandos básicos:

        Crear un repositorio:

git init

Verificar el estado del repositorio:

        git status

3. Estructura del Repositorio del Curso

    Importancia de la estructura: Mantener una estructura organizada permite una fácil navegación y colaboración. Además, facilita la documentación.

    Estructura recomendada:

    README.md
    /TP_1
    /TP_2
    /Clases
      /Clase_1
        /Apuntes
        /Ejercicios
        /Resumen_pedagogico
    /TRABAJO_FINAL

    README.md: Un archivo esencial que proporciona información sobre el proyecto, objetivos, estructura y expectativas. Debería contener:

        Tu información personal.

        Intereses en programación.

        Expectativas sobre la materia.

4. Primer Commit y Flujo de Trabajo Git

    Áreas en Git:

        Área de trabajo: Los archivos que tienes en tu directorio.

        Área de staging: Los archivos que has marcado para incluir en el próximo commit.

        Repositorio: Donde se almacenan los cambios confirmados (commits).

    Ciclo de trabajo:

        Añadir cambios al área de staging:

git add <archivo>

Realizar un commit con los cambios:

git commit -m "Mensaje del commit"

Ver el historial de commits:

        git log

5. Conexión con Repositorio Remoto

    Repositorios remotos: Son copias de tu repositorio que están alojadas en un servidor y permiten la colaboración entre desarrolladores.

    Comandos para sincronizar con un repositorio remoto:

        Configurar el repositorio remoto:

git remote add origin <url_del_repositorio>

Subir los cambios al repositorio remoto:

        git push -u origin master

6. Conceptos Básicos de Entrada/Salida en Unix

    Entrada/Salida estándar:

        stdin: Entrada estándar (lo que se recibe por teclado).

        stdout: Salida estándar (lo que se imprime en pantalla).

        stderr: Salida de error estándar (para mensajes de error).

    Redirección:

        Redirigir salida a un archivo (sobrescribe):

echo "Hola Mundo" > archivo.txt

Añadir salida a un archivo (sin sobrescribir):

echo "Otro mensaje" >> archivo.txt

Redirigir errores a un archivo:

    comando 2> errores.log

Pipes (|): Conectan la salida de un comando a la entrada de otro comando. Ejemplo:

ls | grep "archivo"

Archivo especial /dev/null: Un archivo que descarta cualquier entrada que reciba. Es útil para ignorar resultados que no necesitas.

    comando > /dev/null

Resumen Final

Hoy aprendiste a configurar Git, crear un repositorio, entender el flujo de trabajo de Git y trabajar con entradas y salidas estándar en Unix/Linux. Ya estás listo para organizar tu código, hacer commits de manera efectiva y gestionar tus proyectos con control de versiones. ¡Recuerda siempre mantener la estructura organizada y aplicar lo aprendido a proyectos reales!